plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'makeus.cmc'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// OIDC
	implementation("com.auth0:java-jwt:4.4.0")
	implementation 'com.auth0:jwks-rsa:0.22.1'

	// Swagger (OpenAPI 3)
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	// OkHttp (HTTP Client)
	implementation 'com.squareup.okhttp3:okhttp:4.12.0'

	testImplementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// WebFlux (Web Client)
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Spring Boot Actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Micrometer Prometheus Registry
	implementation 'io.micrometer:micrometer-registry-prometheus'

}

// QueryDSL Q클래스 생성 경로 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += querydslDir
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean {
	delete file(querydslDir)
}

tasks.named('test') {
	useJUnitPlatform()
}
