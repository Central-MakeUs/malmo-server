name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. 소스 코드 체크아웃 (한 번만 실행)
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 17 설정 (한 번만 실행)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정 (한 번만 실행)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 테스트 실행 시 Redis 연결 확인 후 실행
      - name: Wait for Redis
        run: |
          # redis-cli 설치
          sudo apt-get update && sudo apt-get install -y redis-tools
    
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"

      # 4. 테스트 실행 (Pull Request일 경우 여기까지만 실행)
      - name: Run tests with Gradle
        run: ./gradlew test --no-daemon

      # 5. 빌드 (main 브랜치 push일 경우에만 실행)
      - name: Build with Gradle
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: ./gradlew bootJar --no-daemon

      # 6. Docker Hub 로그인 (배포 시에만)
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app
        run: |
          docker build --platform linux/amd64 -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # 8. EC2에 배포
      - name: Deploy to EC2
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 작업 디렉토리 설정
            WORKDIR="/home/${{ secrets.EC2_USERNAME }}/malmo"
            mkdir -p $WORKDIR
            cd $WORKDIR

            # Blue/Green 배포용 docker-compose.yml 파일 생성
            cat << 'EOF' > docker-compose.yml
            version: '3.8'

            services:
              malmo-blue:
                image: ${DOCKERHUB_USERNAME}/malmo-app:latest
                container_name: malmo-blue
                depends_on:
                  - redis
                ports:
                  - "8081:8080"
                networks:
                  - malmo-network
                restart: always
                env_file:
                  - ./.env

              malmo-green:
                image: ${DOCKERHUB_USERNAME}/malmo-app:latest
                container_name: malmo-green
                depends_on:
                  - redis
                ports:
                  - "8082:8080"
                networks:
                  - malmo-network
                restart: always
                env_file:
                  - ./.env

              redis:
                image: "redis:7-alpine"
                container_name: malmo-redis
                ports:
                  - "6379:6379"
                volumes:
                  - redis-data:/data
                networks:
                  - malmo-network
                restart: always

            networks:
              malmo-network:
                driver: bridge

            volumes:
              redis-data:
            EOF

            # 배포 스크립트(deploy.sh) 생성
            cat << 'EOF' > deploy.sh
            #!/bin/bash
            ACTIVE_CONF_LINK="/etc/nginx/conf.d/malmo_upstream.active.conf"

            # 현재 활성화된 설정 파일 경로 읽기
            CURRENT_CONF=$(readlink $ACTIVE_CONF_LINK)

            if [[ $CURRENT_CONF == *"blue"* ]]; then
              CURRENT_COLOR="blue"
              IDLE_COLOR="green"
              IDLE_CONF="/etc/nginx/conf.d/malmo_upstream_green.conf"
            else
              CURRENT_COLOR="green"
              IDLE_COLOR="blue"
              IDLE_CONF="/etc/nginx/conf.d/malmo_upstream_blue.conf"
            fi

            echo "Current active service: $CURRENT_COLOR"
            echo "Deploying to idle service: $IDLE_COLOR"

            # 유휴 서비스 컨테이너 시작
            docker-compose pull malmo-$IDLE_COLOR
            docker-compose up -d --no-deps malmo-$IDLE_COLOR

            echo "Waiting for $IDLE_COLOR service to be up..."
            sleep 30

            # Health check (포트 번호는 색상에 따라 결정)
            IDLE_PORT=$([ "$IDLE_COLOR" == "blue" ] && echo 8081 || echo 8082)
            for i in {1..10}; do
              HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$IDLE_PORT/actuator/health)
              if [ "$HEALTH_STATUS" -eq 200 ]; then
                echo "Health check successful for $IDLE_COLOR."
                
                # Nginx 트래픽 전환 (심볼릭 링크 대상 변경)
                echo "Switching Nginx traffic to $IDLE_COLOR..."
                sudo ln -snf $IDLE_CONF $ACTIVE_CONF_LINK
                sudo systemctl reload nginx
                echo "Traffic switched successfully."

                # 이전 서비스 중지
                echo "Stopping old service: $CURRENT_COLOR..."
                docker-compose stop malmo-$CURRENT_COLOR
                echo "Old service stopped."
                exit 0
              fi
              echo "Health check failed (status: $HEALTH_STATUS). Retrying in 10 seconds... ($i/10)"
              sleep 10
            done

            echo "Deployment failed: $IDLE_COLOR service did not become healthy in time."
            exit 1
            EOF

            # .env 파일 생성
            cat << EOF > .env
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }}
            APPLE_REST_API_KEY=${{ secrets.APPLE_REST_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            SWAGGER_SERVER_PRODUCTION_URL=${{ secrets.SWAGGER_SERVER_PRODUCTION_URL }}
            SECURITY_CLIENT_URL_PRODUCTION=${{ secrets.SECURITY_CLIENT_URL_PRODUCTION }}
            SECURITY_CLIENT_URL_DEVELOPMENT=${{ secrets.SECURITY_CLIENT_URL_DEVELOPMENT }}
            SECURITY_SERVER_URL_PRODUCTION=${{ secrets.SECURITY_SERVER_URL_PRODUCTION }}
            SECURITY_SERVER_URL_DEVELOPMENT=${{ secrets.SECURITY_SERVER_URL_DEVELOPMENT }}
            EOF

            # Docker Hub 로그인
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # 배포 스크립트 실행 권한 부여 및 실행
            chmod +x deploy.sh
            ./deploy.sh