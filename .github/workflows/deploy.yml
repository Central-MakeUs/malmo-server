name: Deploy to AWS EC2 (Blue-Green)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Redis 대기
      - name: Wait for Redis
        run: |
          sudo apt-get update && sudo apt-get install -y redis-tools
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"

      # 5. 테스트 실행
      - name: Run tests with Gradle
        run: ./gradlew test --no-daemon

      # 6. 빌드
      - name: Build with Gradle
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: ./gradlew bootJar --no-daemon

      # 7. Docker Hub 로그인
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 8. Docker 이미지 빌드 & 푸시
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app
        run: |
          docker build --platform linux/amd64 -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # 9. EC2에 배포 (Blue-Green)
      - name: Deploy to EC2 (Blue-Green)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # 현재 실행 중인 포트 확인
            CURRENT_PORT=$(grep -Po 'proxy_pass http://localhost:\K[0-9]+' /etc/nginx/sites-enabled/malmo.conf)
            if [ "$CURRENT_PORT" == "8081" ]; then
              IDLE_PORT=8082
            else
              IDLE_PORT=8081
            fi

            echo "Current active port: $CURRENT_PORT"
            echo "Idle port: $IDLE_PORT"

            # Idle 포트 컨테이너 실행
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app:latest
            docker stop malmo-app-$IDLE_PORT || true
            docker rm malmo-app-$IDLE_PORT || true
            docker run -d --name malmo-app-$IDLE_PORT \
              -p $IDLE_PORT:8080 \
              --network host \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e SPRING_DATA_REDIS_HOST=localhost \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }} \
              -e APPLE_REST_API_KEY=${{ secrets.APPLE_REST_API_KEY }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e SWAGGER_SERVER_PRODUCTION_URL=${{ secrets.SWAGGER_SERVER_PRODUCTION_URL }} \
              -e SECURITY_CLIENT_URL_PRODUCTION=${{ secrets.SECURITY_CLIENT_URL_PRODUCTION }} \
              -e SECURITY_CLIENT_URL_DEVELOPMENT=${{ secrets.SECURITY_CLIENT_URL_DEVELOPMENT }} \
              -e SECURITY_SERVER_URL_PRODUCTION=${{ secrets.SECURITY_SERVER_URL_PRODUCTION }} \
              -e SECURITY_SERVER_URL_DEVELOPMENT=${{ secrets.SECURITY_SERVER_URL_DEVELOPMENT }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app:latest

            # 헬스 체크
            for i in {1..30}; do
              if curl -s http://localhost:$IDLE_PORT/actuator/health | grep '"status":"UP"' > /dev/null; then
                echo "New version is healthy!"
                break
              fi
              echo "Waiting for application to be healthy..."
              sleep 2
            done

            # Nginx 포트 변경
            sudo sed -i "s|proxy_pass http://localhost:[0-9]\+|proxy_pass http://localhost:$IDLE_PORT|g" /etc/nginx/sites-enabled/malmo.conf
            sudo nginx -t && sudo systemctl reload nginx
            echo "Nginx now points to port $IDLE_PORT"

            # 기존 컨테이너 종료
            docker stop malmo-app-$CURRENT_PORT || true
            docker rm malmo-app-$CURRENT_PORT || true

            # 불필요한 이미지 정리
            docker image prune -f
