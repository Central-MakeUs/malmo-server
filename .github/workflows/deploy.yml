name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test --no-daemon --info
      env:
        SPRING_PROFILES_ACTIVE: 'test'

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew bootJar --no-daemon
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      env:
        IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $IMAGE_NAME:$IMAGE_TAG .
        docker build -t $IMAGE_NAME:latest .
        docker push $IMAGE_NAME:$IMAGE_TAG
        docker push $IMAGE_NAME:latest
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Docker Hub 로그인
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          
          # 기존 컨테이너 중지 및 제거
          docker stop malmo-app || true
          docker rm malmo-app || true
          
          # 최신 이미지 pull
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app:latest
          
          # 새 컨테이너 실행
          docker run -d \
            --name malmo-app \
            -p 8080:8080 \
            --restart unless-stopped \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}" \
            -e SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}" \
            -e SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" \
            -e APPLE_REST_API_KEY="${{ secrets.APPLE_REST_API_KEY }}" \
            -e SWAGGER_SERVER_PRODUCTION_URL="${{ secrets.SWAGGER_SERVER_PRODUCTION_URL }}" \
            ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app:latest
          
          # 불필요한 이미지 정리
          docker image prune -f