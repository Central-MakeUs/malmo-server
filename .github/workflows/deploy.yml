name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. 소스 코드 체크아웃 (한 번만 실행)
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. JDK 17 설정 (한 번만 실행)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정 (한 번만 실행)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 테스트 실행 시 Redis 연결 확인 후 실행
      - name: Wait for Redis
        run: |
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"

      # 4. 테스트 실행 (Pull Request일 경우 여기까지만 실행)
      - name: Run tests with Gradle
        run: ./gradlew test --no-daemon

      # 5. 빌드 (main 브랜치 push일 경우에만 실행)
      # Pull Request가 아닌 main 브랜치 푸시일 때만 아래 스텝들이 실행됩니다.
      - name: Build with Gradle
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: ./gradlew bootJar --no-daemon

      # 6. Docker Hub 로그인 (배포 시에만)
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app
        run: |
          docker build --platform linux/amd64 -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # 8. EC2에 배포
      - name: Deploy to EC2
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            docker stop malmo-app || true
            docker rm malmo-app || true
            
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app:latest
            
            docker run -d \
              --name malmo-app \
              -p 8080:8080 \
              --restart unless-stopped \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" \
              -e APPLE_REST_API_KEY="${{ secrets.APPLE_REST_API_KEY }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e SWAGGER_SERVER_PRODUCTION_URL="${{ secrets.SWAGGER_SERVER_PRODUCTION_URL }}" \
              -e SECURITY_CLIENT_URL_PRODUCTION="${{ secrets.SECURITY_CLIENT_URL_PRODUCTION }}" \
              -e SECURITY_CLIENT_URL_DEVELOPMENT="${{ secrets.SECURITY_CLIENT_URL_DEVELOPMENT }}" \
              -e SECURITY_SERVER_URL_PRODUCTION="${{ secrets.SECURITY_SERVER_URL_PRODUCTION }}" \
              -e SECURITY_SERVER_URL_DEVELOPMENT="${{ secrets.SECURITY_SERVER_URL_DEVELOPMENT }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/malmo-app:latest
            
            docker image prune -f
